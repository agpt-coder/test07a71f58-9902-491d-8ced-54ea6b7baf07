// datasource db defines the database connection settings.
// It is configured for PostgreSQL and uses an environment variable for the connection URL.
// The 'extensions' feature enables the use of PostgreSQL-specific data types.
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

// generator db configures Prisma Client settings.
// It is set up to use Prisma Client Python with asyncio interface and specific features.
generator db {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
  previewFeatures      = ["postgresqlExtensions"]
}

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  QRCode    QRCode[]
  apiKey    APIKey[]
}

model QRCode {
  id                   String                @id @default(dbgenerated("gen_random_uuid()"))
  data                 String
  size                 Int
  color                String
  errorCorrectionLevel ErrorCorrectionLevel
  format               QRCodeFormat
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  userId               String
  User                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  Customization        Customization?        @relation(fields: [customizationId], references: [id])
  Internationalization Internationalization?
  batchProcessId       String?
  BatchProcess         BatchProcess?         @relation(fields: [batchProcessId], references: [id])
  customizationId      String?
}

model Customization {
  id     String   @id @default(dbgenerated("gen_random_uuid()"))
  margin Int
  logo   String?
  QRCode QRCode[]
}

model APIKey {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  key       String   @unique
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
}

model Internationalization {
  id       String @id @default(dbgenerated("gen_random_uuid()"))
  language String
  content  String
  qrCodeId String @unique
  QRCode   QRCode @relation(fields: [qrCodeId], references: [id])
}

model BatchProcess {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  QRCode    QRCode[]
}

model Monitoring {
  id         String   @id @default(dbgenerated("gen_random_uuid()"))
  metricName String
  value      Float
  recordedAt DateTime @default(now())
}

model Log {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  message   String
  level     LogLevel
  createdAt DateTime @default(now())
}

enum Role {
  USER
  ADMIN
  EDITOR
}

enum ErrorCorrectionLevel {
  L
  M
  Q
  H
}

enum QRCodeFormat {
  PNG
  SVG
}

enum LogLevel {
  INFO
  WARNING
  ERROR
}

